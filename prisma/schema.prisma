// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  username  String   @unique
  password  String
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspaces   Workspace[]
  timeSessions TimeSession[]
}

model Workspace {
  id        Int      @id @default(autoincrement())
  name      String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lists     List[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model List {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  icon          String
  iconColor     String
  isArchived    Boolean        @default(false)
  archivedAt    DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tasks         Task[]
  timelineNodes TimelineNode[]
  timelineEdges TimelineEdge[]
  workspace     Workspace      @relation(fields: [workspaceId], references: [id])
  workspaceId   Int
}

model Task {
  id    Int    @id @default(autoincrement())
  title String

  status String @default("inprogress")

  priority          String    @default("medium")
  estimatedTime     Int       @default(60)
  timeSpent         Int       @default(0)
  lastStartTime     DateTime? // When timer started (null = not active)
  deadline          DateTime?
  scheduledForToday Boolean   @default(false)
  todayScheduledAt  DateTime?
  weekNumber        Int?
  weekYear          Int?
  assignedWeek      String?

  orderInColumn Int     @default(0)
  notes         String?

  subtasks     Subtask[]
  timeSessions TimeSession[] // Keep for historical data only

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  listId Int
  list   List @relation(fields: [listId], references: [id])

  timelineNode TimelineNode?
}

model Subtask {
  id        Int      @id @default(autoincrement())
  title     String
  completed Boolean  @default(false)
  order     Int      @default(0)
  taskId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model TimeSession {
  id        String    @id @default(cuid())
  startTime DateTime  @default(now())
  endTime   DateTime?
  duration  Int? // duration in seconds (calculated when session ends)

  taskId Int
  userId String

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TimelineNode {
  id     String @id @default(cuid())
  nodeId String // The unique ID of the node in React Flow
  type   String // e.g., 'customTask', 'customAttachment'

  positionX  Float
  positionY  Float
  isFinished Boolean @default(false)

  listId Int
  list   List @relation(fields: [listId], references: [id], onDelete: Cascade)

  // Optional link to a Task if the node represents a task
  taskId Int?  @unique
  task   Task? @relation(fields: [taskId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([listId, nodeId])
}

model TimelineEdge {
  id       String @id @default(cuid())
  sourceId String // The ID of the source node
  targetId String // The ID of the target node

  listId Int
  list   List @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@unique([listId, sourceId, targetId])
}
