// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  username  String   @unique
  password  String
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspaces   Workspace[]
  timeSessions TimeSession[]
}

model Workspace {
  id        Int      @id @default(autoincrement())
  name      String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lists     List[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model List {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  icon        String
  iconColor   String
  isArchived  Boolean      @default(false)
  archivedAt  DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tasks       Task[]
  attachments Attachment[]
  workspace   Workspace    @relation(fields: [workspaceId], references: [id])
  workspaceId Int
  Note        Note[]
  UrlNode     UrlNode[]
}

model Task {
  id    Int    @id @default(autoincrement())
  title String

  status String @default("inprogress")

  priority          String    @default("medium")
  estimatedTime     Int       @default(60)
  timeSpent         Int       @default(0)
  lastStartTime     DateTime? // When timer started (null = not active)
  deadline          DateTime?
  scheduledForToday Boolean   @default(false)
  todayScheduledAt  DateTime?
  weekNumber        Int?
  weekYear          Int?
  assignedWeek      String?

  orderInColumn Int           @default(0)
  subtasks      Subtask[]
  notes         Note[]
  attachments   Attachment[]
  urlNodes      UrlNode[]
  timeSessions  TimeSession[] // Keep for historical data only

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  listId Int
  list   List @relation(fields: [listId], references: [id])
}

model Note {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    Int?
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  listId    Int?
  list      List?    @relation(fields: [listId], references: [id], onDelete: Cascade)
}

model Subtask {
  id        Int      @id @default(autoincrement())
  title     String
  completed Boolean  @default(false)
  order     Int      @default(0)
  taskId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model TimeSession {
  id        String    @id @default(cuid())
  startTime DateTime  @default(now())
  endTime   DateTime?
  duration  Int? // duration in seconds (calculated when session ends)

  taskId Int
  userId String

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id        Int      @id @default(autoincrement())
  name      String
  url       String?
  fileType  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    Int?
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  listId    Int?
  list      List?    @relation(fields: [listId], references: [id], onDelete: Cascade)
}

model UrlNode {
  id        Int      @id @default(autoincrement())
  name      String?
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    Int?
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  listId    Int?
  list      List?    @relation(fields: [listId], references: [id], onDelete: Cascade)
}
